# -*- coding: utf-8 -*-
"""ANN-Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a3P2dbm6oz5WL-v2UiiQMYPJbcx43Uzx
"""

from google.colab import drive
drive.mount('/content/drive/')

pip install tensorflow

import numpy as np
import pandas as pd
import tensorflow as tf
from scipy import stats 
from scipy.interpolate import make_interp_spline
import seaborn as sns
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation
from tensorflow.keras.callbacks import EarlyStopping
from sklearn import metrics
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import r2_score
import time

dataset = pd.read_csv('/content/drive/MyDrive/one_hot_encoded_dataset.csv')
dataset.head()

y_train = dataset['formatted_price'][:192167]
y_test = dataset['formatted_price'][192167:]

# dataset.drop(columns=['formatted_price','num_of_hours_taken','flight_day'],axis=1,inplace=True)
dataset.drop(columns=['formatted_price'],axis=1,inplace=True)

x_train = dataset[:192167]
x_test = dataset[192167:]

dataset.shape

# Build the neural network
model = model = tf.keras.Sequential([
                                     tf.keras.layers.Dense(units=128, input_dim=x_train.shape[1]),
                                     tf.keras.layers.Dense(1)
    ])

model.compile(optimizer='adam', loss='mean_squared_error')

start = time.process_time()
model.fit(x_train, y_train, epochs=10)
print(f'Time: {time.process_time() - start}')

model.evaluate(x_test, y_test)

# model = tf.keras.Sequential()
# model.add(Dense(8, input_dim=x_train.shape[1]))
# model.add(tf.keras.layers.Dense(8))
# model.add(tf.keras.layers.Dense(1))
# model.compile(optimizer='sgd', loss='mse',metrics=['accuracy'] )
# # This builds the model for the first time:
# model.fit(x_train,y_train, batch_size=32, epochs=10)

# Predict
pred = model.predict(x_test)

# Measure MSE error.  
score = metrics.mean_squared_error(pred,y_test)

print(f'r2_score: {r2_score(y_test,pred)}')
print(f'MSE: {mean_squared_error(y_test, pred)}')
print(f'RMSE: {np.sqrt(mean_squared_error(y_test,pred))}')
print(f'MAE: {mean_absolute_error(y_test,pred)}')

def compare_orgin_predict(y_test,y_pred,N=40):
  x_ax = range(len(y_test[:N]))
  plt.plot(x_ax, y_test[:N], label="original")
  plt.plot(x_ax, y_pred[:N], label="predicted")
  plt.title("Flight Price test and predicted data")
  plt.xlabel('Observation Number')
  plt.ylabel('Price')
  plt.legend()
  plt.show()

compare_orgin_predict(y_test,pred,N=40)